# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_bibldbc')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_bibldbc')
    _bibldbc = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_bibldbc', [dirname(__file__)])
        except ImportError:
            import _bibldbc
            return _bibldbc
        try:
            _mod = imp.load_module('_bibldbc', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _bibldbc = swig_import_helper()
    del swig_import_helper
else:
    import _bibldbc
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bibldbc.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _bibldbc.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _bibldbc.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _bibldbc.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _bibldbc.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _bibldbc.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _bibldbc.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _bibldbc.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _bibldbc.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _bibldbc.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _bibldbc.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _bibldbc.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _bibldbc.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _bibldbc.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _bibldbc.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _bibldbc.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _bibldbc.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _bibldbc.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ios_base(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios_base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ios_base, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _bibldbc.ios_base_erase_event
    imbue_event = _bibldbc.ios_base_imbue_event
    copyfmt_event = _bibldbc.ios_base_copyfmt_event

    def register_callback(self, __fn: 'std::ios_base::event_callback', __index: 'int') -> "void":
        return _bibldbc.ios_base_register_callback(self, __fn, __index)

    def flags(self, *args) -> "std::ios_base::fmtflags":
        return _bibldbc.ios_base_flags(self, *args)

    def setf(self, *args) -> "std::ios_base::fmtflags":
        return _bibldbc.ios_base_setf(self, *args)

    def unsetf(self, __mask: 'std::ios_base::fmtflags') -> "void":
        return _bibldbc.ios_base_unsetf(self, __mask)

    def precision(self, *args) -> "std::streamsize":
        return _bibldbc.ios_base_precision(self, *args)

    def width(self, *args) -> "std::streamsize":
        return _bibldbc.ios_base_width(self, *args)
    if _newclass:
        sync_with_stdio = staticmethod(_bibldbc.ios_base_sync_with_stdio)
    else:
        sync_with_stdio = _bibldbc.ios_base_sync_with_stdio

    def imbue(self, __loc: 'std::locale const &') -> "std::locale":
        return _bibldbc.ios_base_imbue(self, __loc)

    def getloc(self) -> "std::locale":
        return _bibldbc.ios_base_getloc(self)
    if _newclass:
        xalloc = staticmethod(_bibldbc.ios_base_xalloc)
    else:
        xalloc = _bibldbc.ios_base_xalloc

    def iword(self, __ix: 'int') -> "long &":
        return _bibldbc.ios_base_iword(self, __ix)

    def pword(self, __ix: 'int') -> "void *&":
        return _bibldbc.ios_base_pword(self, __ix)
    __swig_destroy__ = _bibldbc.delete_ios_base
    __del__ = lambda self: None
ios_base_swigregister = _bibldbc.ios_base_swigregister
ios_base_swigregister(ios_base)
cvar = _bibldbc.cvar
ios_base.boolalpha = _bibldbc.cvar.ios_base_boolalpha
ios_base.dec = _bibldbc.cvar.ios_base_dec
ios_base.fixed = _bibldbc.cvar.ios_base_fixed
ios_base.hex = _bibldbc.cvar.ios_base_hex
ios_base.internal = _bibldbc.cvar.ios_base_internal
ios_base.left = _bibldbc.cvar.ios_base_left
ios_base.oct = _bibldbc.cvar.ios_base_oct
ios_base.right = _bibldbc.cvar.ios_base_right
ios_base.scientific = _bibldbc.cvar.ios_base_scientific
ios_base.showbase = _bibldbc.cvar.ios_base_showbase
ios_base.showpoint = _bibldbc.cvar.ios_base_showpoint
ios_base.showpos = _bibldbc.cvar.ios_base_showpos
ios_base.skipws = _bibldbc.cvar.ios_base_skipws
ios_base.unitbuf = _bibldbc.cvar.ios_base_unitbuf
ios_base.uppercase = _bibldbc.cvar.ios_base_uppercase
ios_base.adjustfield = _bibldbc.cvar.ios_base_adjustfield
ios_base.basefield = _bibldbc.cvar.ios_base_basefield
ios_base.floatfield = _bibldbc.cvar.ios_base_floatfield
ios_base.badbit = _bibldbc.cvar.ios_base_badbit
ios_base.eofbit = _bibldbc.cvar.ios_base_eofbit
ios_base.failbit = _bibldbc.cvar.ios_base_failbit
ios_base.goodbit = _bibldbc.cvar.ios_base_goodbit
ios_base.app = _bibldbc.cvar.ios_base_app
ios_base.ate = _bibldbc.cvar.ios_base_ate
ios_base.binary = _bibldbc.cvar.ios_base_binary
ios_base.ios_base_in = _bibldbc.cvar.ios_base_ios_base_in
ios_base.out = _bibldbc.cvar.ios_base_out
ios_base.trunc = _bibldbc.cvar.ios_base_trunc
ios_base.beg = _bibldbc.cvar.ios_base_beg
ios_base.cur = _bibldbc.cvar.ios_base_cur
ios_base.end = _bibldbc.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync: 'bool'=True) -> "bool":
    return _bibldbc.ios_base_sync_with_stdio(__sync)
ios_base_sync_with_stdio = _bibldbc.ios_base_sync_with_stdio

def ios_base_xalloc() -> "int":
    return _bibldbc.ios_base_xalloc()
ios_base_xalloc = _bibldbc.ios_base_xalloc

class ios(ios_base):
    __swig_setmethods__ = {}
    for _s in [ios_base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios, name, value)
    __swig_getmethods__ = {}
    for _s in [ios_base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ios, name)
    __repr__ = _swig_repr

    def rdstate(self) -> "std::ios_base::iostate":
        return _bibldbc.ios_rdstate(self)

    def clear(self, *args) -> "void":
        return _bibldbc.ios_clear(self, *args)

    def setstate(self, __state: 'std::ios_base::iostate') -> "void":
        return _bibldbc.ios_setstate(self, __state)

    def good(self) -> "bool":
        return _bibldbc.ios_good(self)

    def eof(self) -> "bool":
        return _bibldbc.ios_eof(self)

    def fail(self) -> "bool":
        return _bibldbc.ios_fail(self)

    def bad(self) -> "bool":
        return _bibldbc.ios_bad(self)

    def exceptions(self, *args) -> "void":
        return _bibldbc.ios_exceptions(self, *args)

    def __init__(self, __sb: 'std::basic_streambuf< char,std::char_traits< char > > *'):
        this = _bibldbc.new_ios(__sb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bibldbc.delete_ios
    __del__ = lambda self: None

    def tie(self, *args) -> "std::basic_ostream< char,std::char_traits< char > > *":
        return _bibldbc.ios_tie(self, *args)

    def rdbuf(self, *args) -> "std::basic_streambuf< char,std::char_traits< char > > *":
        return _bibldbc.ios_rdbuf(self, *args)

    def copyfmt(self, __rhs: 'ios') -> "std::basic_ios< char > &":
        return _bibldbc.ios_copyfmt(self, __rhs)

    def fill(self, *args) -> "std::basic_ios< char >::char_type":
        return _bibldbc.ios_fill(self, *args)

    def imbue(self, __loc: 'std::locale const &') -> "std::locale":
        return _bibldbc.ios_imbue(self, __loc)

    def narrow(self, __c: 'std::basic_ios< char >::char_type', __dfault: 'char') -> "char":
        return _bibldbc.ios_narrow(self, __c, __dfault)

    def widen(self, __c: 'char') -> "std::basic_ios< char >::char_type":
        return _bibldbc.ios_widen(self, __c)
ios_swigregister = _bibldbc.ios_swigregister
ios_swigregister(ios)

class ostream(ios):
    __swig_setmethods__ = {}
    for _s in [ios]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ostream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ostream, name)
    __repr__ = _swig_repr

    def __init__(self, __sb: 'std::basic_streambuf< char,std::char_traits< char > > *'):
        this = _bibldbc.new_ostream(__sb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bibldbc.delete_ostream
    __del__ = lambda self: None

    def __lshift__(self, *args) -> "std::basic_ostream< char,std::char_traits< char > > &":
        return _bibldbc.ostream___lshift__(self, *args)

    def put(self, __c: 'std::basic_ostream< char >::char_type') -> "std::basic_ostream< char,std::char_traits< char > > &":
        return _bibldbc.ostream_put(self, __c)

    def write(self, __s: 'std::basic_ostream< char >::char_type const *', __n: 'std::streamsize') -> "std::basic_ostream< char,std::char_traits< char > > &":
        return _bibldbc.ostream_write(self, __s, __n)

    def flush(self) -> "std::basic_ostream< char,std::char_traits< char > > &":
        return _bibldbc.ostream_flush(self)

    def tellp(self) -> "std::basic_ostream< char >::pos_type":
        return _bibldbc.ostream_tellp(self)

    def seekp(self, *args) -> "std::basic_ostream< char,std::char_traits< char > > &":
        return _bibldbc.ostream_seekp(self, *args)
ostream_swigregister = _bibldbc.ostream_swigregister
ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    __swig_setmethods__ = {}
    for _s in [ios]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, istream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, istream, name)
    __repr__ = _swig_repr

    def __init__(self, __sb: 'std::basic_streambuf< char,std::char_traits< char > > *'):
        this = _bibldbc.new_istream(__sb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bibldbc.delete_istream
    __del__ = lambda self: None

    def __rshift__(self, *args) -> "std::basic_istream< char,std::char_traits< char > > &":
        return _bibldbc.istream___rshift__(self, *args)

    def gcount(self) -> "std::streamsize":
        return _bibldbc.istream_gcount(self)

    def get(self, *args) -> "std::basic_istream< char,std::char_traits< char > > &":
        return _bibldbc.istream_get(self, *args)

    def getline(self, *args) -> "std::basic_istream< char,std::char_traits< char > > &":
        return _bibldbc.istream_getline(self, *args)

    def ignore(self, *args) -> "std::basic_istream< char,std::char_traits< char > > &":
        return _bibldbc.istream_ignore(self, *args)

    def peek(self) -> "std::basic_istream< char >::int_type":
        return _bibldbc.istream_peek(self)

    def read(self, __s: 'std::basic_istream< char >::char_type *', __n: 'std::streamsize') -> "std::basic_istream< char,std::char_traits< char > > &":
        return _bibldbc.istream_read(self, __s, __n)

    def readsome(self, __s: 'std::basic_istream< char >::char_type *', __n: 'std::streamsize') -> "std::streamsize":
        return _bibldbc.istream_readsome(self, __s, __n)

    def putback(self, __c: 'std::basic_istream< char >::char_type') -> "std::basic_istream< char,std::char_traits< char > > &":
        return _bibldbc.istream_putback(self, __c)

    def unget(self) -> "std::basic_istream< char,std::char_traits< char > > &":
        return _bibldbc.istream_unget(self)

    def sync(self) -> "int":
        return _bibldbc.istream_sync(self)

    def tellg(self) -> "std::basic_istream< char >::pos_type":
        return _bibldbc.istream_tellg(self)

    def seekg(self, *args) -> "std::basic_istream< char,std::char_traits< char > > &":
        return _bibldbc.istream_seekg(self, *args)
istream_swigregister = _bibldbc.istream_swigregister
istream_swigregister(istream)

class iostream(istream, ostream):
    __swig_setmethods__ = {}
    for _s in [istream, ostream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iostream, name, value)
    __swig_getmethods__ = {}
    for _s in [istream, ostream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, iostream, name)
    __repr__ = _swig_repr

    def __init__(self, __sb: 'std::basic_streambuf< char,std::char_traits< char > > *'):
        this = _bibldbc.new_iostream(__sb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bibldbc.delete_iostream
    __del__ = lambda self: None
iostream_swigregister = _bibldbc.iostream_swigregister
iostream_swigregister(iostream)

endl_cb_ptr = _bibldbc.endl_cb_ptr

def endl(arg1: 'ostream') -> "std::basic_ostream< char,std::char_traits< char > > &":
    return _bibldbc.endl(arg1)
endl = _bibldbc.endl
ends_cb_ptr = _bibldbc.ends_cb_ptr

def ends(arg1: 'ostream') -> "std::basic_ostream< char,std::char_traits< char > > &":
    return _bibldbc.ends(arg1)
ends = _bibldbc.ends
flush_cb_ptr = _bibldbc.flush_cb_ptr

def flush(arg1: 'ostream') -> "std::basic_ostream< char,std::char_traits< char > > &":
    return _bibldbc.flush(arg1)
flush = _bibldbc.flush
class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _bibldbc.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _bibldbc.StringVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _bibldbc.StringVector___bool__(self)

    def __len__(self) -> "std::vector< std::string >::size_type":
        return _bibldbc.StringVector___len__(self)

    def __getslice__(self, i: 'std::vector< std::string >::difference_type', j: 'std::vector< std::string >::difference_type') -> "std::vector< std::string,std::allocator< std::string > > *":
        return _bibldbc.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _bibldbc.StringVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< std::string >::difference_type', j: 'std::vector< std::string >::difference_type') -> "void":
        return _bibldbc.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _bibldbc.StringVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        return _bibldbc.StringVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _bibldbc.StringVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::string >::value_type":
        return _bibldbc.StringVector_pop(self)

    def append(self, x: 'std::vector< std::string >::value_type const &') -> "void":
        return _bibldbc.StringVector_append(self, x)

    def empty(self) -> "bool":
        return _bibldbc.StringVector_empty(self)

    def size(self) -> "std::vector< std::string >::size_type":
        return _bibldbc.StringVector_size(self)

    def swap(self, v: 'StringVector') -> "void":
        return _bibldbc.StringVector_swap(self, v)

    def begin(self) -> "std::vector< std::string >::iterator":
        return _bibldbc.StringVector_begin(self)

    def end(self) -> "std::vector< std::string >::iterator":
        return _bibldbc.StringVector_end(self)

    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        return _bibldbc.StringVector_rbegin(self)

    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        return _bibldbc.StringVector_rend(self)

    def clear(self) -> "void":
        return _bibldbc.StringVector_clear(self)

    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        return _bibldbc.StringVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _bibldbc.StringVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::string >::iterator":
        return _bibldbc.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _bibldbc.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< std::string >::value_type const &') -> "void":
        return _bibldbc.StringVector_push_back(self, x)

    def front(self) -> "std::vector< std::string >::value_type const &":
        return _bibldbc.StringVector_front(self)

    def back(self) -> "std::vector< std::string >::value_type const &":
        return _bibldbc.StringVector_back(self)

    def assign(self, n: 'std::vector< std::string >::size_type', x: 'std::vector< std::string >::value_type const &') -> "void":
        return _bibldbc.StringVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _bibldbc.StringVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _bibldbc.StringVector_insert(self, *args)

    def reserve(self, n: 'std::vector< std::string >::size_type') -> "void":
        return _bibldbc.StringVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::string >::size_type":
        return _bibldbc.StringVector_capacity(self)
    __swig_destroy__ = _bibldbc.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _bibldbc.StringVector_swigregister
StringVector_swigregister(StringVector)

class CWos(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CWos, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CWos, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bibldbc.new_CWos()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bibldbc.delete_CWos
    __del__ = lambda self: None

    def DelWosSaveFile(self) -> "void":
        return _bibldbc.CWos_DelWosSaveFile(self)
    __swig_setmethods__["wos_save_fname"] = _bibldbc.CWos_wos_save_fname_set
    __swig_getmethods__["wos_save_fname"] = _bibldbc.CWos_wos_save_fname_get
    if _newclass:
        wos_save_fname = _swig_property(_bibldbc.CWos_wos_save_fname_get, _bibldbc.CWos_wos_save_fname_set)
CWos_swigregister = _bibldbc.CWos_swigregister
CWos_swigregister(CWos)

UNDEF_OBJ = _bibldbc.UNDEF_OBJ
REF_OBJ = _bibldbc.REF_OBJ
AUTHOR_OBJ = _bibldbc.AUTHOR_OBJ
JOURNAL_OBJ = _bibldbc.JOURNAL_OBJ
KEYWORD_OBJ = _bibldbc.KEYWORD_OBJ
NOTE_OBJ = _bibldbc.NOTE_OBJ
class DataObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bibldbc.delete_DataObject
    __del__ = lambda self: None

    def ToString(self, format: 'int'=0) -> "std::string":
        return _bibldbc.DataObject_ToString(self, format)

    def IsLoaded(self) -> "bool":
        return _bibldbc.DataObject_IsLoaded(self)

    def Clear(self) -> "void":
        return _bibldbc.DataObject_Clear(self)

    def GetId(self) -> "int":
        return _bibldbc.DataObject_GetId(self)

    def SetId(self, id: 'int') -> "void":
        return _bibldbc.DataObject_SetId(self, id)
    __swig_setmethods__["obj_id"] = _bibldbc.DataObject_obj_id_set
    __swig_getmethods__["obj_id"] = _bibldbc.DataObject_obj_id_get
    if _newclass:
        obj_id = _swig_property(_bibldbc.DataObject_obj_id_get, _bibldbc.DataObject_obj_id_set)
    __swig_setmethods__["is_loaded"] = _bibldbc.DataObject_is_loaded_set
    __swig_getmethods__["is_loaded"] = _bibldbc.DataObject_is_loaded_get
    if _newclass:
        is_loaded = _swig_property(_bibldbc.DataObject_is_loaded_get, _bibldbc.DataObject_is_loaded_set)
    __swig_setmethods__["type"] = _bibldbc.DataObject_type_set
    __swig_getmethods__["type"] = _bibldbc.DataObject_type_get
    if _newclass:
        type = _swig_property(_bibldbc.DataObject_type_get, _bibldbc.DataObject_type_set)
DataObject_swigregister = _bibldbc.DataObject_swigregister
DataObject_swigregister(DataObject)


def CompareObjTypeString(obj1: 'DataObject', obj2: 'DataObject') -> "bool":
    return _bibldbc.CompareObjTypeString(obj1, obj2)
CompareObjTypeString = _bibldbc.CompareObjTypeString

def CompareObjSPtrTypeString(sp_obj1: 'ObjSPtr const &', sp_obj2: 'ObjSPtr const &') -> "bool":
    return _bibldbc.CompareObjSPtrTypeString(sp_obj1, sp_obj2)
CompareObjSPtrTypeString = _bibldbc.CompareObjSPtrTypeString
class AuthorRef(DataObject):
    __swig_setmethods__ = {}
    for _s in [DataObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AuthorRef, name, value)
    __swig_getmethods__ = {}
    for _s in [DataObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AuthorRef, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bibldbc.new_AuthorRef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bibldbc.delete_AuthorRef
    __del__ = lambda self: None

    def Clear(self) -> "void":
        return _bibldbc.AuthorRef_Clear(self)

    def ToString(self, format: 'int'=0) -> "std::string":
        return _bibldbc.AuthorRef_ToString(self, format)
    if _newclass:
        AuthVecToString = staticmethod(_bibldbc.AuthorRef_AuthVecToString)
    else:
        AuthVecToString = _bibldbc.AuthorRef_AuthVecToString
    __swig_setmethods__["last_name"] = _bibldbc.AuthorRef_last_name_set
    __swig_getmethods__["last_name"] = _bibldbc.AuthorRef_last_name_get
    if _newclass:
        last_name = _swig_property(_bibldbc.AuthorRef_last_name_get, _bibldbc.AuthorRef_last_name_set)
    __swig_setmethods__["first_name"] = _bibldbc.AuthorRef_first_name_set
    __swig_getmethods__["first_name"] = _bibldbc.AuthorRef_first_name_get
    if _newclass:
        first_name = _swig_property(_bibldbc.AuthorRef_first_name_get, _bibldbc.AuthorRef_first_name_set)
    __swig_setmethods__["initials"] = _bibldbc.AuthorRef_initials_set
    __swig_getmethods__["initials"] = _bibldbc.AuthorRef_initials_get
    if _newclass:
        initials = _swig_property(_bibldbc.AuthorRef_initials_get, _bibldbc.AuthorRef_initials_set)
    __swig_setmethods__["middle_name"] = _bibldbc.AuthorRef_middle_name_set
    __swig_getmethods__["middle_name"] = _bibldbc.AuthorRef_middle_name_get
    if _newclass:
        middle_name = _swig_property(_bibldbc.AuthorRef_middle_name_get, _bibldbc.AuthorRef_middle_name_set)
    __swig_setmethods__["suffix"] = _bibldbc.AuthorRef_suffix_set
    __swig_getmethods__["suffix"] = _bibldbc.AuthorRef_suffix_get
    if _newclass:
        suffix = _swig_property(_bibldbc.AuthorRef_suffix_get, _bibldbc.AuthorRef_suffix_set)
    __swig_setmethods__["address"] = _bibldbc.AuthorRef_address_set
    __swig_getmethods__["address"] = _bibldbc.AuthorRef_address_get
    if _newclass:
        address = _swig_property(_bibldbc.AuthorRef_address_get, _bibldbc.AuthorRef_address_set)
    __swig_setmethods__["url"] = _bibldbc.AuthorRef_url_set
    __swig_getmethods__["url"] = _bibldbc.AuthorRef_url_get
    if _newclass:
        url = _swig_property(_bibldbc.AuthorRef_url_get, _bibldbc.AuthorRef_url_set)
    __swig_setmethods__["note"] = _bibldbc.AuthorRef_note_set
    __swig_getmethods__["note"] = _bibldbc.AuthorRef_note_get
    if _newclass:
        note = _swig_property(_bibldbc.AuthorRef_note_get, _bibldbc.AuthorRef_note_set)
    __swig_setmethods__["importance"] = _bibldbc.AuthorRef_importance_set
    __swig_getmethods__["importance"] = _bibldbc.AuthorRef_importance_get
    if _newclass:
        importance = _swig_property(_bibldbc.AuthorRef_importance_get, _bibldbc.AuthorRef_importance_set)
AuthorRef_swigregister = _bibldbc.AuthorRef_swigregister
AuthorRef_swigregister(AuthorRef)

def AuthorRef_AuthVecToString(auth_vec: 'std::vector< AuthorRef,std::allocator< AuthorRef > > const &') -> "std::string":
    return _bibldbc.AuthorRef_AuthVecToString(auth_vec)
AuthorRef_AuthVecToString = _bibldbc.AuthorRef_AuthVecToString

class JournalRef(DataObject):
    __swig_setmethods__ = {}
    for _s in [DataObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JournalRef, name, value)
    __swig_getmethods__ = {}
    for _s in [DataObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, JournalRef, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bibldbc.new_JournalRef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bibldbc.delete_JournalRef
    __del__ = lambda self: None

    def Clear(self) -> "void":
        return _bibldbc.JournalRef_Clear(self)

    def ToString(self, format: 'int'=0) -> "std::string":
        return _bibldbc.JournalRef_ToString(self, format)
    __swig_setmethods__["full_name"] = _bibldbc.JournalRef_full_name_set
    __swig_getmethods__["full_name"] = _bibldbc.JournalRef_full_name_get
    if _newclass:
        full_name = _swig_property(_bibldbc.JournalRef_full_name_get, _bibldbc.JournalRef_full_name_set)
    __swig_setmethods__["std_abbr"] = _bibldbc.JournalRef_std_abbr_set
    __swig_getmethods__["std_abbr"] = _bibldbc.JournalRef_std_abbr_get
    if _newclass:
        std_abbr = _swig_property(_bibldbc.JournalRef_std_abbr_get, _bibldbc.JournalRef_std_abbr_set)
    __swig_setmethods__["short_abbr"] = _bibldbc.JournalRef_short_abbr_set
    __swig_getmethods__["short_abbr"] = _bibldbc.JournalRef_short_abbr_get
    if _newclass:
        short_abbr = _swig_property(_bibldbc.JournalRef_short_abbr_get, _bibldbc.JournalRef_short_abbr_set)
    __swig_setmethods__["fname_abbr"] = _bibldbc.JournalRef_fname_abbr_set
    __swig_getmethods__["fname_abbr"] = _bibldbc.JournalRef_fname_abbr_get
    if _newclass:
        fname_abbr = _swig_property(_bibldbc.JournalRef_fname_abbr_get, _bibldbc.JournalRef_fname_abbr_set)
    __swig_setmethods__["publisher_id"] = _bibldbc.JournalRef_publisher_id_set
    __swig_getmethods__["publisher_id"] = _bibldbc.JournalRef_publisher_id_get
    if _newclass:
        publisher_id = _swig_property(_bibldbc.JournalRef_publisher_id_get, _bibldbc.JournalRef_publisher_id_set)
    __swig_setmethods__["abbr_29"] = _bibldbc.JournalRef_abbr_29_set
    __swig_getmethods__["abbr_29"] = _bibldbc.JournalRef_abbr_29_get
    if _newclass:
        abbr_29 = _swig_property(_bibldbc.JournalRef_abbr_29_get, _bibldbc.JournalRef_abbr_29_set)
    __swig_setmethods__["issn"] = _bibldbc.JournalRef_issn_set
    __swig_getmethods__["issn"] = _bibldbc.JournalRef_issn_get
    if _newclass:
        issn = _swig_property(_bibldbc.JournalRef_issn_get, _bibldbc.JournalRef_issn_set)
    __swig_setmethods__["essn"] = _bibldbc.JournalRef_essn_set
    __swig_getmethods__["essn"] = _bibldbc.JournalRef_essn_get
    if _newclass:
        essn = _swig_property(_bibldbc.JournalRef_essn_get, _bibldbc.JournalRef_essn_set)
    __swig_setmethods__["nlm_id"] = _bibldbc.JournalRef_nlm_id_set
    __swig_getmethods__["nlm_id"] = _bibldbc.JournalRef_nlm_id_get
    if _newclass:
        nlm_id = _swig_property(_bibldbc.JournalRef_nlm_id_get, _bibldbc.JournalRef_nlm_id_set)
    __swig_setmethods__["publisher_str"] = _bibldbc.JournalRef_publisher_str_set
    __swig_getmethods__["publisher_str"] = _bibldbc.JournalRef_publisher_str_get
    if _newclass:
        publisher_str = _swig_property(_bibldbc.JournalRef_publisher_str_get, _bibldbc.JournalRef_publisher_str_set)
    __swig_setmethods__["synonyms"] = _bibldbc.JournalRef_synonyms_set
    __swig_getmethods__["synonyms"] = _bibldbc.JournalRef_synonyms_get
    if _newclass:
        synonyms = _swig_property(_bibldbc.JournalRef_synonyms_get, _bibldbc.JournalRef_synonyms_set)
JournalRef_swigregister = _bibldbc.JournalRef_swigregister
JournalRef_swigregister(JournalRef)

class BiblRef(DataObject):
    __swig_setmethods__ = {}
    for _s in [DataObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BiblRef, name, value)
    __swig_getmethods__ = {}
    for _s in [DataObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BiblRef, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _bibldbc.new_BiblRef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bibldbc.delete_BiblRef
    __del__ = lambda self: None

    def Clear(self) -> "void":
        return _bibldbc.BiblRef_Clear(self)

    def ToString(self, format: 'int'=0) -> "std::string":
        return _bibldbc.BiblRef_ToString(self, format)

    def GetAuthorStr(self) -> "std::string":
        return _bibldbc.BiblRef_GetAuthorStr(self)
    __swig_setmethods__["ext_ref_id"] = _bibldbc.BiblRef_ext_ref_id_set
    __swig_getmethods__["ext_ref_id"] = _bibldbc.BiblRef_ext_ref_id_get
    if _newclass:
        ext_ref_id = _swig_property(_bibldbc.BiblRef_ext_ref_id_get, _bibldbc.BiblRef_ext_ref_id_set)
    __swig_setmethods__["ref_type"] = _bibldbc.BiblRef_ref_type_set
    __swig_getmethods__["ref_type"] = _bibldbc.BiblRef_ref_type_get
    if _newclass:
        ref_type = _swig_property(_bibldbc.BiblRef_ref_type_get, _bibldbc.BiblRef_ref_type_set)
    __swig_setmethods__["auth_vec"] = _bibldbc.BiblRef_auth_vec_set
    __swig_getmethods__["auth_vec"] = _bibldbc.BiblRef_auth_vec_get
    if _newclass:
        auth_vec = _swig_property(_bibldbc.BiblRef_auth_vec_get, _bibldbc.BiblRef_auth_vec_set)
    __swig_setmethods__["authors_str"] = _bibldbc.BiblRef_authors_str_set
    __swig_getmethods__["authors_str"] = _bibldbc.BiblRef_authors_str_get
    if _newclass:
        authors_str = _swig_property(_bibldbc.BiblRef_authors_str_get, _bibldbc.BiblRef_authors_str_set)
    __swig_setmethods__["title"] = _bibldbc.BiblRef_title_set
    __swig_getmethods__["title"] = _bibldbc.BiblRef_title_get
    if _newclass:
        title = _swig_property(_bibldbc.BiblRef_title_get, _bibldbc.BiblRef_title_set)
    __swig_setmethods__["book_title"] = _bibldbc.BiblRef_book_title_set
    __swig_getmethods__["book_title"] = _bibldbc.BiblRef_book_title_get
    if _newclass:
        book_title = _swig_property(_bibldbc.BiblRef_book_title_get, _bibldbc.BiblRef_book_title_set)
    __swig_setmethods__["jrn"] = _bibldbc.BiblRef_jrn_set
    __swig_getmethods__["jrn"] = _bibldbc.BiblRef_jrn_get
    if _newclass:
        jrn = _swig_property(_bibldbc.BiblRef_jrn_get, _bibldbc.BiblRef_jrn_set)
    __swig_setmethods__["vol"] = _bibldbc.BiblRef_vol_set
    __swig_getmethods__["vol"] = _bibldbc.BiblRef_vol_get
    if _newclass:
        vol = _swig_property(_bibldbc.BiblRef_vol_get, _bibldbc.BiblRef_vol_set)
    __swig_setmethods__["iss"] = _bibldbc.BiblRef_iss_set
    __swig_getmethods__["iss"] = _bibldbc.BiblRef_iss_get
    if _newclass:
        iss = _swig_property(_bibldbc.BiblRef_iss_get, _bibldbc.BiblRef_iss_set)
    __swig_setmethods__["pub_year"] = _bibldbc.BiblRef_pub_year_set
    __swig_getmethods__["pub_year"] = _bibldbc.BiblRef_pub_year_get
    if _newclass:
        pub_year = _swig_property(_bibldbc.BiblRef_pub_year_get, _bibldbc.BiblRef_pub_year_set)
    __swig_setmethods__["pub_month"] = _bibldbc.BiblRef_pub_month_set
    __swig_getmethods__["pub_month"] = _bibldbc.BiblRef_pub_month_get
    if _newclass:
        pub_month = _swig_property(_bibldbc.BiblRef_pub_month_get, _bibldbc.BiblRef_pub_month_set)
    __swig_setmethods__["first_page"] = _bibldbc.BiblRef_first_page_set
    __swig_getmethods__["first_page"] = _bibldbc.BiblRef_first_page_get
    if _newclass:
        first_page = _swig_property(_bibldbc.BiblRef_first_page_get, _bibldbc.BiblRef_first_page_set)
    __swig_setmethods__["last_page"] = _bibldbc.BiblRef_last_page_set
    __swig_getmethods__["last_page"] = _bibldbc.BiblRef_last_page_get
    if _newclass:
        last_page = _swig_property(_bibldbc.BiblRef_last_page_get, _bibldbc.BiblRef_last_page_set)
    __swig_setmethods__["isi_id"] = _bibldbc.BiblRef_isi_id_set
    __swig_getmethods__["isi_id"] = _bibldbc.BiblRef_isi_id_get
    if _newclass:
        isi_id = _swig_property(_bibldbc.BiblRef_isi_id_get, _bibldbc.BiblRef_isi_id_set)
    __swig_setmethods__["isi_id_int"] = _bibldbc.BiblRef_isi_id_int_set
    __swig_getmethods__["isi_id_int"] = _bibldbc.BiblRef_isi_id_int_get
    if _newclass:
        isi_id_int = _swig_property(_bibldbc.BiblRef_isi_id_int_get, _bibldbc.BiblRef_isi_id_int_set)
    __swig_setmethods__["ga_code"] = _bibldbc.BiblRef_ga_code_set
    __swig_getmethods__["ga_code"] = _bibldbc.BiblRef_ga_code_get
    if _newclass:
        ga_code = _swig_property(_bibldbc.BiblRef_ga_code_get, _bibldbc.BiblRef_ga_code_set)
    __swig_setmethods__["pubmed_id"] = _bibldbc.BiblRef_pubmed_id_set
    __swig_getmethods__["pubmed_id"] = _bibldbc.BiblRef_pubmed_id_get
    if _newclass:
        pubmed_id = _swig_property(_bibldbc.BiblRef_pubmed_id_get, _bibldbc.BiblRef_pubmed_id_set)
    __swig_setmethods__["reprint_status"] = _bibldbc.BiblRef_reprint_status_set
    __swig_getmethods__["reprint_status"] = _bibldbc.BiblRef_reprint_status_get
    if _newclass:
        reprint_status = _swig_property(_bibldbc.BiblRef_reprint_status_get, _bibldbc.BiblRef_reprint_status_set)
    __swig_setmethods__["importance"] = _bibldbc.BiblRef_importance_set
    __swig_getmethods__["importance"] = _bibldbc.BiblRef_importance_get
    if _newclass:
        importance = _swig_property(_bibldbc.BiblRef_importance_get, _bibldbc.BiblRef_importance_set)
    __swig_setmethods__["doi"] = _bibldbc.BiblRef_doi_set
    __swig_getmethods__["doi"] = _bibldbc.BiblRef_doi_get
    if _newclass:
        doi = _swig_property(_bibldbc.BiblRef_doi_get, _bibldbc.BiblRef_doi_set)
    __swig_setmethods__["url"] = _bibldbc.BiblRef_url_set
    __swig_getmethods__["url"] = _bibldbc.BiblRef_url_get
    if _newclass:
        url = _swig_property(_bibldbc.BiblRef_url_get, _bibldbc.BiblRef_url_set)
    __swig_setmethods__["pii_id"] = _bibldbc.BiblRef_pii_id_set
    __swig_getmethods__["pii_id"] = _bibldbc.BiblRef_pii_id_get
    if _newclass:
        pii_id = _swig_property(_bibldbc.BiblRef_pii_id_get, _bibldbc.BiblRef_pii_id_set)
    __swig_setmethods__["pmc_id"] = _bibldbc.BiblRef_pmc_id_set
    __swig_getmethods__["pmc_id"] = _bibldbc.BiblRef_pmc_id_get
    if _newclass:
        pmc_id = _swig_property(_bibldbc.BiblRef_pmc_id_get, _bibldbc.BiblRef_pmc_id_set)
    __swig_setmethods__["incomplete_auth_flag"] = _bibldbc.BiblRef_incomplete_auth_flag_set
    __swig_getmethods__["incomplete_auth_flag"] = _bibldbc.BiblRef_incomplete_auth_flag_get
    if _newclass:
        incomplete_auth_flag = _swig_property(_bibldbc.BiblRef_incomplete_auth_flag_get, _bibldbc.BiblRef_incomplete_auth_flag_set)
    __swig_setmethods__["num_cited_in"] = _bibldbc.BiblRef_num_cited_in_set
    __swig_getmethods__["num_cited_in"] = _bibldbc.BiblRef_num_cited_in_get
    if _newclass:
        num_cited_in = _swig_property(_bibldbc.BiblRef_num_cited_in_get, _bibldbc.BiblRef_num_cited_in_set)
    __swig_setmethods__["num_citing"] = _bibldbc.BiblRef_num_citing_set
    __swig_getmethods__["num_citing"] = _bibldbc.BiblRef_num_citing_get
    if _newclass:
        num_citing = _swig_property(_bibldbc.BiblRef_num_citing_get, _bibldbc.BiblRef_num_citing_set)
    __swig_setmethods__["last_update_time"] = _bibldbc.BiblRef_last_update_time_set
    __swig_getmethods__["last_update_time"] = _bibldbc.BiblRef_last_update_time_get
    if _newclass:
        last_update_time = _swig_property(_bibldbc.BiblRef_last_update_time_get, _bibldbc.BiblRef_last_update_time_set)
    __swig_setmethods__["keywords_str"] = _bibldbc.BiblRef_keywords_str_set
    __swig_getmethods__["keywords_str"] = _bibldbc.BiblRef_keywords_str_get
    if _newclass:
        keywords_str = _swig_property(_bibldbc.BiblRef_keywords_str_get, _bibldbc.BiblRef_keywords_str_set)
    __swig_setmethods__["abstract_str"] = _bibldbc.BiblRef_abstract_str_set
    __swig_getmethods__["abstract_str"] = _bibldbc.BiblRef_abstract_str_get
    if _newclass:
        abstract_str = _swig_property(_bibldbc.BiblRef_abstract_str_get, _bibldbc.BiblRef_abstract_str_set)
    __swig_setmethods__["notes"] = _bibldbc.BiblRef_notes_set
    __swig_getmethods__["notes"] = _bibldbc.BiblRef_notes_get
    if _newclass:
        notes = _swig_property(_bibldbc.BiblRef_notes_get, _bibldbc.BiblRef_notes_set)

    def HasDOI(self) -> "bool":
        return _bibldbc.BiblRef_HasDOI(self)
BiblRef_swigregister = _bibldbc.BiblRef_swigregister
BiblRef_swigregister(BiblRef)
BIB_REF_TYPE_JOURNAL = cvar.BIB_REF_TYPE_JOURNAL
BIB_REF_TYPE_IN_SERIES = cvar.BIB_REF_TYPE_IN_SERIES
BIB_REF_TYPE_BOOK = cvar.BIB_REF_TYPE_BOOK
BIB_REF_TYPE_BOOK_CHAPTER = cvar.BIB_REF_TYPE_BOOK_CHAPTER

class KeyWord(DataObject):
    __swig_setmethods__ = {}
    for _s in [DataObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeyWord, name, value)
    __swig_getmethods__ = {}
    for _s in [DataObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KeyWord, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bibldbc.new_KeyWord()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bibldbc.delete_KeyWord
    __del__ = lambda self: None

    def Clear(self) -> "void":
        return _bibldbc.KeyWord_Clear(self)

    def ToString(self, format: 'int'=0) -> "std::string":
        return _bibldbc.KeyWord_ToString(self, format)
    __swig_setmethods__["data_str"] = _bibldbc.KeyWord_data_str_set
    __swig_getmethods__["data_str"] = _bibldbc.KeyWord_data_str_get
    if _newclass:
        data_str = _swig_property(_bibldbc.KeyWord_data_str_get, _bibldbc.KeyWord_data_str_set)
KeyWord_swigregister = _bibldbc.KeyWord_swigregister
KeyWord_swigregister(KeyWord)

KEYWORD_TAG = _bibldbc.KEYWORD_TAG
AUTH_REF = _bibldbc.AUTH_REF
class RefWebInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefWebInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefWebInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["html_url"] = _bibldbc.RefWebInfo_html_url_set
    __swig_getmethods__["html_url"] = _bibldbc.RefWebInfo_html_url_get
    if _newclass:
        html_url = _swig_property(_bibldbc.RefWebInfo_html_url_get, _bibldbc.RefWebInfo_html_url_set)
    __swig_setmethods__["pdf_url"] = _bibldbc.RefWebInfo_pdf_url_set
    __swig_getmethods__["pdf_url"] = _bibldbc.RefWebInfo_pdf_url_get
    if _newclass:
        pdf_url = _swig_property(_bibldbc.RefWebInfo_pdf_url_get, _bibldbc.RefWebInfo_pdf_url_set)
    __swig_setmethods__["doi"] = _bibldbc.RefWebInfo_doi_set
    __swig_getmethods__["doi"] = _bibldbc.RefWebInfo_doi_get
    if _newclass:
        doi = _swig_property(_bibldbc.RefWebInfo_doi_get, _bibldbc.RefWebInfo_doi_set)
    __swig_setmethods__["support_info"] = _bibldbc.RefWebInfo_support_info_set
    __swig_getmethods__["support_info"] = _bibldbc.RefWebInfo_support_info_get
    if _newclass:
        support_info = _swig_property(_bibldbc.RefWebInfo_support_info_get, _bibldbc.RefWebInfo_support_info_set)
    __swig_setmethods__["journal_url"] = _bibldbc.RefWebInfo_journal_url_set
    __swig_getmethods__["journal_url"] = _bibldbc.RefWebInfo_journal_url_get
    if _newclass:
        journal_url = _swig_property(_bibldbc.RefWebInfo_journal_url_get, _bibldbc.RefWebInfo_journal_url_set)
    __swig_setmethods__["issue_list_url"] = _bibldbc.RefWebInfo_issue_list_url_set
    __swig_getmethods__["issue_list_url"] = _bibldbc.RefWebInfo_issue_list_url_get
    if _newclass:
        issue_list_url = _swig_property(_bibldbc.RefWebInfo_issue_list_url_get, _bibldbc.RefWebInfo_issue_list_url_set)
    __swig_setmethods__["issue_url"] = _bibldbc.RefWebInfo_issue_url_set
    __swig_getmethods__["issue_url"] = _bibldbc.RefWebInfo_issue_url_get
    if _newclass:
        issue_url = _swig_property(_bibldbc.RefWebInfo_issue_url_get, _bibldbc.RefWebInfo_issue_url_set)

    def __init__(self):
        this = _bibldbc.new_RefWebInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bibldbc.delete_RefWebInfo
    __del__ = lambda self: None
RefWebInfo_swigregister = _bibldbc.RefWebInfo_swigregister
RefWebInfo_swigregister(RefWebInfo)
wxEVT_DELETE_REFS = cvar.wxEVT_DELETE_REFS
EMPTY_VEC_INT = cvar.EMPTY_VEC_INT

class BibRefRequest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BibRefRequest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BibRefRequest, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bibldbc.new_BibRefRequest()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bibldbc.delete_BibRefRequest
    __del__ = lambda self: None

    def Clear(self) -> "int":
        return _bibldbc.BibRefRequest_Clear(self)
    __swig_setmethods__["ref_id_from"] = _bibldbc.BibRefRequest_ref_id_from_set
    __swig_getmethods__["ref_id_from"] = _bibldbc.BibRefRequest_ref_id_from_get
    if _newclass:
        ref_id_from = _swig_property(_bibldbc.BibRefRequest_ref_id_from_get, _bibldbc.BibRefRequest_ref_id_from_set)
    __swig_setmethods__["ref_id_to"] = _bibldbc.BibRefRequest_ref_id_to_set
    __swig_getmethods__["ref_id_to"] = _bibldbc.BibRefRequest_ref_id_to_get
    if _newclass:
        ref_id_to = _swig_property(_bibldbc.BibRefRequest_ref_id_to_get, _bibldbc.BibRefRequest_ref_id_to_set)
    __swig_setmethods__["pub_year_from"] = _bibldbc.BibRefRequest_pub_year_from_set
    __swig_getmethods__["pub_year_from"] = _bibldbc.BibRefRequest_pub_year_from_get
    if _newclass:
        pub_year_from = _swig_property(_bibldbc.BibRefRequest_pub_year_from_get, _bibldbc.BibRefRequest_pub_year_from_set)
    __swig_setmethods__["pub_year_to"] = _bibldbc.BibRefRequest_pub_year_to_set
    __swig_getmethods__["pub_year_to"] = _bibldbc.BibRefRequest_pub_year_to_get
    if _newclass:
        pub_year_to = _swig_property(_bibldbc.BibRefRequest_pub_year_to_get, _bibldbc.BibRefRequest_pub_year_to_set)
    __swig_setmethods__["ref_id_citing_this"] = _bibldbc.BibRefRequest_ref_id_citing_this_set
    __swig_getmethods__["ref_id_citing_this"] = _bibldbc.BibRefRequest_ref_id_citing_this_get
    if _newclass:
        ref_id_citing_this = _swig_property(_bibldbc.BibRefRequest_ref_id_citing_this_get, _bibldbc.BibRefRequest_ref_id_citing_this_set)
    __swig_setmethods__["ref_id_cited_in_this"] = _bibldbc.BibRefRequest_ref_id_cited_in_this_set
    __swig_getmethods__["ref_id_cited_in_this"] = _bibldbc.BibRefRequest_ref_id_cited_in_this_get
    if _newclass:
        ref_id_cited_in_this = _swig_property(_bibldbc.BibRefRequest_ref_id_cited_in_this_get, _bibldbc.BibRefRequest_ref_id_cited_in_this_set)
    __swig_setmethods__["author_flt_str"] = _bibldbc.BibRefRequest_author_flt_str_set
    __swig_getmethods__["author_flt_str"] = _bibldbc.BibRefRequest_author_flt_str_get
    if _newclass:
        author_flt_str = _swig_property(_bibldbc.BibRefRequest_author_flt_str_get, _bibldbc.BibRefRequest_author_flt_str_set)
    __swig_setmethods__["title_flt_str"] = _bibldbc.BibRefRequest_title_flt_str_set
    __swig_getmethods__["title_flt_str"] = _bibldbc.BibRefRequest_title_flt_str_get
    if _newclass:
        title_flt_str = _swig_property(_bibldbc.BibRefRequest_title_flt_str_get, _bibldbc.BibRefRequest_title_flt_str_set)
    __swig_setmethods__["journal_flt"] = _bibldbc.BibRefRequest_journal_flt_set
    __swig_getmethods__["journal_flt"] = _bibldbc.BibRefRequest_journal_flt_get
    if _newclass:
        journal_flt = _swig_property(_bibldbc.BibRefRequest_journal_flt_get, _bibldbc.BibRefRequest_journal_flt_set)
    __swig_setmethods__["isi_id_flt"] = _bibldbc.BibRefRequest_isi_id_flt_set
    __swig_getmethods__["isi_id_flt"] = _bibldbc.BibRefRequest_isi_id_flt_get
    if _newclass:
        isi_id_flt = _swig_property(_bibldbc.BibRefRequest_isi_id_flt_get, _bibldbc.BibRefRequest_isi_id_flt_set)
    __swig_setmethods__["importance_flt"] = _bibldbc.BibRefRequest_importance_flt_set
    __swig_getmethods__["importance_flt"] = _bibldbc.BibRefRequest_importance_flt_get
    if _newclass:
        importance_flt = _swig_property(_bibldbc.BibRefRequest_importance_flt_get, _bibldbc.BibRefRequest_importance_flt_set)
    __swig_setmethods__["reprint_flt"] = _bibldbc.BibRefRequest_reprint_flt_set
    __swig_getmethods__["reprint_flt"] = _bibldbc.BibRefRequest_reprint_flt_get
    if _newclass:
        reprint_flt = _swig_property(_bibldbc.BibRefRequest_reprint_flt_get, _bibldbc.BibRefRequest_reprint_flt_set)
    __swig_setmethods__["keywords_refs_flt"] = _bibldbc.BibRefRequest_keywords_refs_flt_set
    __swig_getmethods__["keywords_refs_flt"] = _bibldbc.BibRefRequest_keywords_refs_flt_get
    if _newclass:
        keywords_refs_flt = _swig_property(_bibldbc.BibRefRequest_keywords_refs_flt_get, _bibldbc.BibRefRequest_keywords_refs_flt_set)
    __swig_setmethods__["volume_flt"] = _bibldbc.BibRefRequest_volume_flt_set
    __swig_getmethods__["volume_flt"] = _bibldbc.BibRefRequest_volume_flt_get
    if _newclass:
        volume_flt = _swig_property(_bibldbc.BibRefRequest_volume_flt_get, _bibldbc.BibRefRequest_volume_flt_set)
    __swig_setmethods__["issue_flt"] = _bibldbc.BibRefRequest_issue_flt_set
    __swig_getmethods__["issue_flt"] = _bibldbc.BibRefRequest_issue_flt_get
    if _newclass:
        issue_flt = _swig_property(_bibldbc.BibRefRequest_issue_flt_get, _bibldbc.BibRefRequest_issue_flt_set)
    __swig_setmethods__["pages_flt"] = _bibldbc.BibRefRequest_pages_flt_set
    __swig_getmethods__["pages_flt"] = _bibldbc.BibRefRequest_pages_flt_get
    if _newclass:
        pages_flt = _swig_property(_bibldbc.BibRefRequest_pages_flt_get, _bibldbc.BibRefRequest_pages_flt_set)
    __swig_setmethods__["n_ref_limit"] = _bibldbc.BibRefRequest_n_ref_limit_set
    __swig_getmethods__["n_ref_limit"] = _bibldbc.BibRefRequest_n_ref_limit_get
    if _newclass:
        n_ref_limit = _swig_property(_bibldbc.BibRefRequest_n_ref_limit_get, _bibldbc.BibRefRequest_n_ref_limit_set)
    __swig_setmethods__["n_ref_offset"] = _bibldbc.BibRefRequest_n_ref_offset_set
    __swig_getmethods__["n_ref_offset"] = _bibldbc.BibRefRequest_n_ref_offset_get
    if _newclass:
        n_ref_offset = _swig_property(_bibldbc.BibRefRequest_n_ref_offset_get, _bibldbc.BibRefRequest_n_ref_offset_set)
BibRefRequest_swigregister = _bibldbc.BibRefRequest_swigregister
BibRefRequest_swigregister(BibRefRequest)

class BibRefInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BibRefInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BibRefInfo, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bibldbc.new_BibRefInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bibldbc.delete_BibRefInfo
    __del__ = lambda self: None

    def Clear(self) -> "int":
        return _bibldbc.BibRefInfo_Clear(self)
    __swig_setmethods__["keywords_str"] = _bibldbc.BibRefInfo_keywords_str_set
    __swig_getmethods__["keywords_str"] = _bibldbc.BibRefInfo_keywords_str_get
    if _newclass:
        keywords_str = _swig_property(_bibldbc.BibRefInfo_keywords_str_get, _bibldbc.BibRefInfo_keywords_str_set)
    __swig_setmethods__["cited_ref"] = _bibldbc.BibRefInfo_cited_ref_set
    __swig_getmethods__["cited_ref"] = _bibldbc.BibRefInfo_cited_ref_get
    if _newclass:
        cited_ref = _swig_property(_bibldbc.BibRefInfo_cited_ref_get, _bibldbc.BibRefInfo_cited_ref_set)
    __swig_setmethods__["cited_in_ref"] = _bibldbc.BibRefInfo_cited_in_ref_set
    __swig_getmethods__["cited_in_ref"] = _bibldbc.BibRefInfo_cited_in_ref_get
    if _newclass:
        cited_in_ref = _swig_property(_bibldbc.BibRefInfo_cited_in_ref_get, _bibldbc.BibRefInfo_cited_in_ref_set)
BibRefInfo_swigregister = _bibldbc.BibRefInfo_swigregister
BibRefInfo_swigregister(BibRefInfo)

class AuthorRequest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AuthorRequest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AuthorRequest, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bibldbc.new_AuthorRequest()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bibldbc.delete_AuthorRequest
    __del__ = lambda self: None
    __swig_setmethods__["search_author_name_flt"] = _bibldbc.AuthorRequest_search_author_name_flt_set
    __swig_getmethods__["search_author_name_flt"] = _bibldbc.AuthorRequest_search_author_name_flt_get
    if _newclass:
        search_author_name_flt = _swig_property(_bibldbc.AuthorRequest_search_author_name_flt_get, _bibldbc.AuthorRequest_search_author_name_flt_set)
    __swig_setmethods__["auth_importance_flt"] = _bibldbc.AuthorRequest_auth_importance_flt_set
    __swig_getmethods__["auth_importance_flt"] = _bibldbc.AuthorRequest_auth_importance_flt_get
    if _newclass:
        auth_importance_flt = _swig_property(_bibldbc.AuthorRequest_auth_importance_flt_get, _bibldbc.AuthorRequest_auth_importance_flt_set)
    __swig_setmethods__["keywords_auth_flt"] = _bibldbc.AuthorRequest_keywords_auth_flt_set
    __swig_getmethods__["keywords_auth_flt"] = _bibldbc.AuthorRequest_keywords_auth_flt_get
    if _newclass:
        keywords_auth_flt = _swig_property(_bibldbc.AuthorRequest_keywords_auth_flt_get, _bibldbc.AuthorRequest_keywords_auth_flt_set)

    def Clear(self) -> "int":
        return _bibldbc.AuthorRequest_Clear(self)
AuthorRequest_swigregister = _bibldbc.AuthorRequest_swigregister
AuthorRequest_swigregister(AuthorRequest)

class JournalRequest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JournalRequest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JournalRequest, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bibldbc.new_JournalRequest()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bibldbc.delete_JournalRequest
    __del__ = lambda self: None
    __swig_setmethods__["journal_name_flt"] = _bibldbc.JournalRequest_journal_name_flt_set
    __swig_getmethods__["journal_name_flt"] = _bibldbc.JournalRequest_journal_name_flt_get
    if _newclass:
        journal_name_flt = _swig_property(_bibldbc.JournalRequest_journal_name_flt_get, _bibldbc.JournalRequest_journal_name_flt_set)
    __swig_setmethods__["jrn_id_from"] = _bibldbc.JournalRequest_jrn_id_from_set
    __swig_getmethods__["jrn_id_from"] = _bibldbc.JournalRequest_jrn_id_from_get
    if _newclass:
        jrn_id_from = _swig_property(_bibldbc.JournalRequest_jrn_id_from_get, _bibldbc.JournalRequest_jrn_id_from_set)
    __swig_setmethods__["jrn_id_to"] = _bibldbc.JournalRequest_jrn_id_to_set
    __swig_getmethods__["jrn_id_to"] = _bibldbc.JournalRequest_jrn_id_to_get
    if _newclass:
        jrn_id_to = _swig_property(_bibldbc.JournalRequest_jrn_id_to_get, _bibldbc.JournalRequest_jrn_id_to_set)

    def Clear(self) -> "int":
        return _bibldbc.JournalRequest_Clear(self)
JournalRequest_swigregister = _bibldbc.JournalRequest_swigregister
JournalRequest_swigregister(JournalRequest)

class BiblDB(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BiblDB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BiblDB, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bibldbc.new_BiblDB()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bibldbc.delete_BiblDB
    __del__ = lambda self: None

    def Init(self) -> "int":
        return _bibldbc.BiblDB_Init(self)

    def InitPython(self) -> "int":
        return _bibldbc.BiblDB_InitPython(self)
    if _newclass:
        RunPythonScriptInString = staticmethod(_bibldbc.BiblDB_RunPythonScriptInString)
    else:
        RunPythonScriptInString = _bibldbc.BiblDB_RunPythonScriptInString

    def SearchRefs(self, breq: 'BibRefRequest') -> "std::vector< int,std::allocator< int > >":
        return _bibldbc.BiblDB_SearchRefs(self, breq)

    def SearchAuths(self, areq: 'AuthorRequest') -> "std::vector< int,std::allocator< int > >":
        return _bibldbc.BiblDB_SearchAuths(self, areq)

    def CreateNewObj(self, obj_type: 'int') -> "int":
        return _bibldbc.BiblDB_CreateNewObj(self, obj_type)

    def DeleteRefs(self, del_refs_id: 'std::vector< int,std::allocator< int > > const &') -> "int":
        return _bibldbc.BiblDB_DeleteRefs(self, del_refs_id)

    def GetRefsByID(self, ref_id_vec: 'std::vector< int,std::allocator< int > > &', refs_vec: 'std::vector< BiblRef,std::allocator< BiblRef > > &') -> "int":
        return _bibldbc.BiblDB_GetRefsByID(self, ref_id_vec, refs_vec)

    def GetRefByID(self, *args) -> "BiblRef":
        return _bibldbc.BiblDB_GetRefByID(self, *args)

    def GetRefID(self, *args) -> "int":
        return _bibldbc.BiblDB_GetRefID(self, *args)

    def CreateNewRefDB(self) -> "int":
        return _bibldbc.BiblDB_CreateNewRefDB(self)

    def UpdateReferenceDB(self, bref: 'BiblRef', force_update: 'int'=0) -> "int":
        return _bibldbc.BiblDB_UpdateReferenceDB(self, bref, force_update)

    def UpdateAuthorsForRef(self, ref_id: 'int', auth_vec: 'std::vector< AuthorRef,std::allocator< AuthorRef > > const &') -> "int":
        return _bibldbc.BiblDB_UpdateAuthorsForRef(self, ref_id, auth_vec)

    def UpdateTextFieldForRef(self, *args) -> "int":
        return _bibldbc.BiblDB_UpdateTextFieldForRef(self, *args)

    def GetTextFieldForRef(self, *args) -> "std::string":
        return _bibldbc.BiblDB_GetTextFieldForRef(self, *args)

    def UpdateIntFieldForRef(self, *args) -> "int":
        return _bibldbc.BiblDB_UpdateIntFieldForRef(self, *args)

    def GetIntFieldForRef(self, *args) -> "int":
        return _bibldbc.BiblDB_GetIntFieldForRef(self, *args)

    def SetImportanceForRef(self, ref_id: 'int', value: 'int') -> "int":
        return _bibldbc.BiblDB_SetImportanceForRef(self, ref_id, value)

    def GetStdPrefix(self, bref: 'BiblRef') -> "std::string":
        return _bibldbc.BiblDB_GetStdPrefix(self, bref)

    def IsSourceInfoComplete(self, bref: 'BiblRef') -> "bool":
        return _bibldbc.BiblDB_IsSourceInfoComplete(self, bref)

    def GetAuthForRef(self, ref_id_a: 'int') -> "std::vector< AuthorRef,std::allocator< AuthorRef > >":
        return _bibldbc.BiblDB_GetAuthForRef(self, ref_id_a)

    def GetAuthForRef_SH(self, ref_id_a: 'int') -> "std::vector< AuthorRef,std::allocator< AuthorRef > >":
        return _bibldbc.BiblDB_GetAuthForRef_SH(self, ref_id_a)

    def GetAuthByID(self, auth_id_a: 'int') -> "AuthorRef":
        return _bibldbc.BiblDB_GetAuthByID(self, auth_id_a)

    def GetAuthsByID(self, auth_id_vec: 'std::vector< int,std::allocator< int > > &', auth_vec: 'std::vector< AuthorRef,std::allocator< AuthorRef > > &') -> "int":
        return _bibldbc.BiblDB_GetAuthsByID(self, auth_id_vec, auth_vec)

    def CreateNewAuthor(self, aref: 'AuthorRef') -> "int":
        return _bibldbc.BiblDB_CreateNewAuthor(self, aref)

    def GetAuthorID(self, aref: 'AuthorRef', create_new_author: 'int'=0) -> "int":
        return _bibldbc.BiblDB_GetAuthorID(self, aref, create_new_author)

    def UpdateAuthorStrForRef(self, ref_id: 'int') -> "int":
        return _bibldbc.BiblDB_UpdateAuthorStrForRef(self, ref_id)

    def SetAuthImportance(self, auth_id: 'int', importance: 'int') -> "int":
        return _bibldbc.BiblDB_SetAuthImportance(self, auth_id, importance)

    def SetAuthURL(self, auth_id: 'int', url_str: 'char const *') -> "int":
        return _bibldbc.BiblDB_SetAuthURL(self, auth_id, url_str)

    def SetAuthNote(self, auth_id: 'int', note_str: 'char const *') -> "int":
        return _bibldbc.BiblDB_SetAuthNote(self, auth_id, note_str)

    def GetJournalByID(self, journal_id: 'int') -> "JournalRef":
        return _bibldbc.BiblDB_GetJournalByID(self, journal_id)

    def GetJournalID(self, *args) -> "int":
        return _bibldbc.BiblDB_GetJournalID(self, *args)

    def GetJournalIDByFullName(self, jrn_full_name: 'char const *') -> "int":
        return _bibldbc.BiblDB_GetJournalIDByFullName(self, jrn_full_name)

    def FilterJournalIDs(self, jreq: 'JournalRequest') -> "std::vector< int,std::allocator< int > >":
        return _bibldbc.BiblDB_FilterJournalIDs(self, jreq)

    def CreateNewJournal(self, jrn_ref: 'JournalRef') -> "int":
        return _bibldbc.BiblDB_CreateNewJournal(self, jrn_ref)

    def UpdateJournal(self, jrn_ref: 'JournalRef', force_update: 'int'=0) -> "int":
        return _bibldbc.BiblDB_UpdateJournal(self, jrn_ref, force_update)

    def GetSynForJournal(self, journal_id: 'int') -> "std::vector< std::string,std::allocator< std::string > >":
        return _bibldbc.BiblDB_GetSynForJournal(self, journal_id)

    def SetSynForJournal(self, journal_id: 'int', jrn_name: 'char const *') -> "int":
        return _bibldbc.BiblDB_SetSynForJournal(self, journal_id, jrn_name)

    def RemoveSynForJournal(self, journal_id: 'int', jrn_name: 'char const *') -> "int":
        return _bibldbc.BiblDB_RemoveSynForJournal(self, journal_id, jrn_name)

    def LoadJournalList1(self, fp: 'FILE *') -> "int":
        return _bibldbc.BiblDB_LoadJournalList1(self, fp)

    def LoadJournalList2(self, fp: 'FILE *') -> "int":
        return _bibldbc.BiblDB_LoadJournalList2(self, fp)

    def LoadJournalList3(self, fname: 'char const *') -> "int":
        return _bibldbc.BiblDB_LoadJournalList3(self, fname)

    def MergeJournals(self, jrn_id_from: 'int', jrn_id_to: 'int') -> "int":
        return _bibldbc.BiblDB_MergeJournals(self, jrn_id_from, jrn_id_to)

    def IsPreprintJournal(self, *args) -> "bool":
        return _bibldbc.BiblDB_IsPreprintJournal(self, *args)

    def GetIncompleteFlagForRef(self, ref_id: 'int') -> "int":
        return _bibldbc.BiblDB_GetIncompleteFlagForRef(self, ref_id)

    def SetIncompleteFlagForRef(self, ref_id: 'int', value_new: 'int'=1) -> "int":
        return _bibldbc.BiblDB_SetIncompleteFlagForRef(self, ref_id, value_new)

    def SetCurrentUpdateTime(self, ref_id: 'int') -> "int":
        return _bibldbc.BiblDB_SetCurrentUpdateTime(self, ref_id)

    def SetCitation(self, ref_id_citing: 'int', ref_id_cited: 'int') -> "int":
        return _bibldbc.BiblDB_SetCitation(self, ref_id_citing, ref_id_cited)

    def RemoveCitation(self, ref_id_citing: 'int', ref_id_cited: 'int') -> "int":
        return _bibldbc.BiblDB_RemoveCitation(self, ref_id_citing, ref_id_cited)

    def GetRefsCitedIn(self, ref_id_citing: 'int') -> "std::vector< int,std::allocator< int > >":
        return _bibldbc.BiblDB_GetRefsCitedIn(self, ref_id_citing)

    def GetRefsCiting(self, ref_id_cited: 'int') -> "std::vector< int,std::allocator< int > >":
        return _bibldbc.BiblDB_GetRefsCiting(self, ref_id_cited)

    def PrintRef1(self, bref: 'BiblRef') -> "void":
        return _bibldbc.BiblDB_PrintRef1(self, bref)

    def PrintRefFullStr(self, bref: 'BiblRef', str: 'std::string &') -> "void":
        return _bibldbc.BiblDB_PrintRefFullStr(self, bref, str)

    def LoadRefFromWeb(self, bref: 'BiblRef') -> "int":
        return _bibldbc.BiblDB_LoadRefFromWeb(self, bref)

    def SaveRefPDF(self, bref: 'BiblRef', pdf_path: 'std::string', overwrite: 'bool'=False) -> "int":
        return _bibldbc.BiblDB_SaveRefPDF(self, bref, pdf_path, overwrite)

    def MoveRefPDFToStdLocation(self, bref: 'BiblRef') -> "int":
        return _bibldbc.BiblDB_MoveRefPDFToStdLocation(self, bref)

    def GetACSRefInfo(self, bref: 'BiblRef', web_info: 'RefWebInfo') -> "int":
        return _bibldbc.BiblDB_GetACSRefInfo(self, bref, web_info)

    def GetAPSRefInfo(self, bref: 'BiblRef', web_info: 'RefWebInfo') -> "int":
        return _bibldbc.BiblDB_GetAPSRefInfo(self, bref, web_info)

    def GetAIPRefInfo(self, bref: 'BiblRef', web_info: 'RefWebInfo') -> "int":
        return _bibldbc.BiblDB_GetAIPRefInfo(self, bref, web_info)

    def GetSpringerJRefInfo(self, bref: 'BiblRef', web_info: 'RefWebInfo') -> "int":
        return _bibldbc.BiblDB_GetSpringerJRefInfo(self, bref, web_info)

    def GetSpringerSRefInfo(self, bref: 'BiblRef', web_info: 'RefWebInfo') -> "int":
        return _bibldbc.BiblDB_GetSpringerSRefInfo(self, bref, web_info)

    def GetSciDirRefInfo(self, bref: 'BiblRef', web_info: 'RefWebInfo') -> "int":
        return _bibldbc.BiblDB_GetSciDirRefInfo(self, bref, web_info)

    def GetSTD1RefInfo(self, bref: 'BiblRef', web_info: 'RefWebInfo') -> "int":
        return _bibldbc.BiblDB_GetSTD1RefInfo(self, bref, web_info)

    def GetAnnuRevRefInfo(self, bref: 'BiblRef', web_info: 'RefWebInfo') -> "int":
        return _bibldbc.BiblDB_GetAnnuRevRefInfo(self, bref, web_info)

    def GetBiblDir(self) -> "std::string":
        return _bibldbc.BiblDB_GetBiblDir(self)

    def GetLocPrefix(self, bref: 'BiblRef') -> "std::string":
        return _bibldbc.BiblDB_GetLocPrefix(self, bref)

    def GetLocDir_DOI(self, bref: 'BiblRef') -> "std::string":
        return _bibldbc.BiblDB_GetLocDir_DOI(self, bref)

    def GetLocDir_default(self, bref: 'BiblRef') -> "std::string":
        return _bibldbc.BiblDB_GetLocDir_default(self, bref)

    def GetLocPathPDF_default(self, bref: 'BiblRef') -> "std::string":
        return _bibldbc.BiblDB_GetLocPathPDF_default(self, bref)

    def GetLocPathPDF_no_subdir(self, bref: 'BiblRef') -> "std::string":
        return _bibldbc.BiblDB_GetLocPathPDF_no_subdir(self, bref)

    def GetLocPathPDF(self, bref: 'BiblRef') -> "std::string":
        return _bibldbc.BiblDB_GetLocPathPDF(self, bref)

    def GetLocPathSupp_no_subdir(self, bref: 'BiblRef') -> "std::string":
        return _bibldbc.BiblDB_GetLocPathSupp_no_subdir(self, bref)

    def HasSupp(self, bref: 'BiblRef') -> "bool":
        return _bibldbc.BiblDB_HasSupp(self, bref)

    def GetPDFName(self, bref: 'BiblRef') -> "std::string":
        return _bibldbc.BiblDB_GetPDFName(self, bref)

    def GetPDFDir(self, bref: 'BiblRef') -> "std::string":
        return _bibldbc.BiblDB_GetPDFDir(self, bref)

    def OpenRefDir(self, bref: 'BiblRef') -> "bool":
        return _bibldbc.BiblDB_OpenRefDir(self, bref)

    def DeleteRefDir(self, bref: 'BiblRef') -> "bool":
        return _bibldbc.BiblDB_DeleteRefDir(self, bref)

    def DeleteRefPDF_no_subdir(self, bref: 'BiblRef') -> "bool":
        return _bibldbc.BiblDB_DeleteRefPDF_no_subdir(self, bref)

    def GetKeyWordID(self, keyw: 'char const *', create_keyw: 'int'=0) -> "int":
        return _bibldbc.BiblDB_GetKeyWordID(self, keyw, create_keyw)

    def GetKeyWordByID(self, keyw_id: 'int') -> "std::string":
        return _bibldbc.BiblDB_GetKeyWordByID(self, keyw_id)

    def AssocObjIDs(self, obj_ids_left: 'std::vector< int,std::allocator< int > > const &', obj_ids_right: 'std::vector< int,std::allocator< int > > const &') -> "int":
        return _bibldbc.BiblDB_AssocObjIDs(self, obj_ids_left, obj_ids_right)

    def DelAssocObjIDs(self, obj_ids_left: 'std::vector< int,std::allocator< int > > const &', obj_ids_right: 'std::vector< int,std::allocator< int > > const &') -> "int":
        return _bibldbc.BiblDB_DelAssocObjIDs(self, obj_ids_left, obj_ids_right)

    def AddKWToCategory(self, kw: 'char const *', cat_str: 'std::string') -> "int":
        return _bibldbc.BiblDB_AddKWToCategory(self, kw, cat_str)

    def DelKWFromCategory(self, kw: 'char const *', cat_str: 'std::string') -> "int":
        return _bibldbc.BiblDB_DelKWFromCategory(self, kw, cat_str)

    def GetKWForCategory(self, str_arr: 'StringVector', cat_str: 'std::string', sel_kw_ids_right_par: 'std::vector< int,std::allocator< int > > *'=None, sel_kw_ids_left_par: 'std::vector< int,std::allocator< int > > *'=None) -> "int":
        return _bibldbc.BiblDB_GetKWForCategory(self, str_arr, cat_str, sel_kw_ids_right_par, sel_kw_ids_left_par)

    def GetObjectsForCategory(self, cat_str: 'std::string') -> "ObjVec":
        return _bibldbc.BiblDB_GetObjectsForCategory(self, cat_str)

    def GetAssocKWRight(self, obj_id: 'int') -> "std::vector< int,std::allocator< int > >":
        return _bibldbc.BiblDB_GetAssocKWRight(self, obj_id)

    def LoadDataObjects(self, ids_vec: 'std::vector< int,std::allocator< int > > const &') -> "ObjVec":
        return _bibldbc.BiblDB_LoadDataObjects(self, ids_vec)

    def GetAssocObjIDs(self, *args) -> "std::vector< int,std::allocator< int > >":
        return _bibldbc.BiblDB_GetAssocObjIDs(self, *args)

    def GetObjType(self, obj_id: 'int') -> "int":
        return _bibldbc.BiblDB_GetObjType(self, obj_id)

    def SetObjKW(self, obj_id: 'int', key_words: 'std::string const &') -> "int":
        return _bibldbc.BiblDB_SetObjKW(self, obj_id, key_words)

    def SetObjKWID(self, obj_id: 'int', kw_id: 'int') -> "int":
        return _bibldbc.BiblDB_SetObjKWID(self, obj_id, kw_id)

    def DelObjKW(self, obj_id: 'int', keyw: 'std::string const &') -> "int":
        return _bibldbc.BiblDB_DelObjKW(self, obj_id, keyw)

    def DelObjKW_All(self, obj_id: 'int') -> "int":
        return _bibldbc.BiblDB_DelObjKW_All(self, obj_id)

    def GetObjKW(self, obj_id: 'int') -> "std::string":
        return _bibldbc.BiblDB_GetObjKW(self, obj_id)

    def GetObjKWID(self, obj_id: 'int') -> "std::vector< int,std::allocator< int > >":
        return _bibldbc.BiblDB_GetObjKWID(self, obj_id)

    def EraseKeyWord(self, kw1: 'char const *') -> "int":
        return _bibldbc.BiblDB_EraseKeyWord(self, kw1)

    def MergeKeyWords(self, kw1: 'char const *', kw2: 'char const *') -> "int":
        return _bibldbc.BiblDB_MergeKeyWords(self, kw1, kw2)

    def SetKW2RefKW1(self, kw1: 'char const *', kw2: 'char const *') -> "int":
        return _bibldbc.BiblDB_SetKW2RefKW1(self, kw1, kw2)

    def GetObjsByKW(self, obj_id_vec: 'std::vector< int,std::allocator< int > > &', obj_type: 'int', kw: 'std::string const &') -> "int":
        return _bibldbc.BiblDB_GetObjsByKW(self, obj_id_vec, obj_type, kw)

    def GetRefsByKW(self, ref_id_vec: 'std::vector< int,std::allocator< int > > &', kw: 'char const *') -> "int":
        return _bibldbc.BiblDB_GetRefsByKW(self, ref_id_vec, kw)

    def GetAuthsByKW(self, auth_id_vec: 'std::vector< int,std::allocator< int > > &', kw: 'char const *') -> "int":
        return _bibldbc.BiblDB_GetAuthsByKW(self, auth_id_vec, kw)

    def InitWebDriver(self) -> "int":
        return _bibldbc.BiblDB_InitWebDriver(self)

    def InitWOS(self) -> "int":
        return _bibldbc.BiblDB_InitWOS(self)

    def InitWOSRemote(self) -> "int":
        return _bibldbc.BiblDB_InitWOSRemote(self)

    def GotoWOSSearchPage(self) -> "int":
        return _bibldbc.BiblDB_GotoWOSSearchPage(self)

    def GotoWOSMainPage(self) -> "int":
        return _bibldbc.BiblDB_GotoWOSMainPage(self)

    def SearchWOSPars(self, breq: 'BibRefRequest') -> "int":
        return _bibldbc.BiblDB_SearchWOSPars(self, breq)

    def GotoWOSMarkedList(self) -> "int":
        return _bibldbc.BiblDB_GotoWOSMarkedList(self)

    def GotoWOSRef(self, ref: 'BiblRef') -> "int":
        return _bibldbc.BiblDB_GotoWOSRef(self, ref)

    def GotoWOSRef2(self, ref: 'BiblRef') -> "int":
        return _bibldbc.BiblDB_GotoWOSRef2(self, ref)

    def GotoWOSRefDriver(self, ref: 'BiblRef') -> "int":
        return _bibldbc.BiblDB_GotoWOSRefDriver(self, ref)

    def GotoWOSCitedRefDriver(self, ref: 'BiblRef') -> "int":
        return _bibldbc.BiblDB_GotoWOSCitedRefDriver(self, ref)

    def GotoWOSCitingRefDriver(self, ref: 'BiblRef') -> "int":
        return _bibldbc.BiblDB_GotoWOSCitingRefDriver(self, ref)

    def GotoWOSCitedRef2(self, ref: 'BiblRef') -> "int":
        return _bibldbc.BiblDB_GotoWOSCitedRef2(self, ref)

    def GotoWOSCitingRef(self, ref: 'BiblRef') -> "int":
        return _bibldbc.BiblDB_GotoWOSCitingRef(self, ref)

    def GotoGScholarRefDriver(self, ref: 'BiblRef') -> "int":
        return _bibldbc.BiblDB_GotoGScholarRefDriver(self, ref)

    def ImportRefsISI(self, stream: 'wxInputStream &', ref_info: 'BibRefInfo'=None) -> "int":
        return _bibldbc.BiblDB_ImportRefsISI(self, stream, ref_info)

    def ImportRefsRIS(self, stream: 'istream', ref_info: 'BibRefInfo'=None) -> "int":
        return _bibldbc.BiblDB_ImportRefsRIS(self, stream, ref_info)

    def ImportRefsPubMedXmlStr(self, refs_str: 'char const *', kw_str: 'char const *'=None) -> "int":
        return _bibldbc.BiblDB_ImportRefsPubMedXmlStr(self, refs_str, kw_str)

    def ImportRefsPubMedXmlFile(self, finp: 'FILE *', kw_str: 'char const *'=None) -> "int":
        return _bibldbc.BiblDB_ImportRefsPubMedXmlFile(self, finp, kw_str)

    def ImportRefsBibTeXStr(self, refs_str: 'std::string', ref_info: 'BibRefInfo'=None) -> "int":
        return _bibldbc.BiblDB_ImportRefsBibTeXStr(self, refs_str, ref_info)

    def ImportRefsNBIB(self, stream: 'istream', ref_info: 'BibRefInfo'=None) -> "int":
        return _bibldbc.BiblDB_ImportRefsNBIB(self, stream, ref_info)

    def AxxFun(self) -> "int":
        return _bibldbc.BiblDB_AxxFun(self)

    def SQLQuery(self, query: 'std::string const &', p_resp: 'StringVector'=None) -> "int":
        return _bibldbc.BiblDB_SQLQuery(self, query, p_resp)

    def SQLIntFunc(self, query: 'std::string const &') -> "int":
        return _bibldbc.BiblDB_SQLIntFunc(self, query)

    def GetLastSQLResNumRows(self) -> "int":
        return _bibldbc.BiblDB_GetLastSQLResNumRows(self)

    def GetLastSQLResNumCols(self) -> "int":
        return _bibldbc.BiblDB_GetLastSQLResNumCols(self)

    def GetLastSQLResError(self) -> "int":
        return _bibldbc.BiblDB_GetLastSQLResError(self)
    __swig_setmethods__["num_rows_sql"] = _bibldbc.BiblDB_num_rows_sql_set
    __swig_getmethods__["num_rows_sql"] = _bibldbc.BiblDB_num_rows_sql_get
    if _newclass:
        num_rows_sql = _swig_property(_bibldbc.BiblDB_num_rows_sql_get, _bibldbc.BiblDB_num_rows_sql_set)
    __swig_setmethods__["num_cols_sql"] = _bibldbc.BiblDB_num_cols_sql_set
    __swig_getmethods__["num_cols_sql"] = _bibldbc.BiblDB_num_cols_sql_get
    if _newclass:
        num_cols_sql = _swig_property(_bibldbc.BiblDB_num_cols_sql_get, _bibldbc.BiblDB_num_cols_sql_set)
    __swig_setmethods__["sql_error_code"] = _bibldbc.BiblDB_sql_error_code_set
    __swig_getmethods__["sql_error_code"] = _bibldbc.BiblDB_sql_error_code_get
    if _newclass:
        sql_error_code = _swig_property(_bibldbc.BiblDB_sql_error_code_get, _bibldbc.BiblDB_sql_error_code_set)
    __swig_setmethods__["junk"] = _bibldbc.BiblDB_junk_set
    __swig_getmethods__["junk"] = _bibldbc.BiblDB_junk_get
    if _newclass:
        junk = _swig_property(_bibldbc.BiblDB_junk_get, _bibldbc.BiblDB_junk_set)
    __swig_setmethods__["show_cit_flag"] = _bibldbc.BiblDB_show_cit_flag_set
    __swig_getmethods__["show_cit_flag"] = _bibldbc.BiblDB_show_cit_flag_get
    if _newclass:
        show_cit_flag = _swig_property(_bibldbc.BiblDB_show_cit_flag_get, _bibldbc.BiblDB_show_cit_flag_set)
    __swig_setmethods__["webdriver_flag"] = _bibldbc.BiblDB_webdriver_flag_set
    __swig_getmethods__["webdriver_flag"] = _bibldbc.BiblDB_webdriver_flag_get
    if _newclass:
        webdriver_flag = _swig_property(_bibldbc.BiblDB_webdriver_flag_get, _bibldbc.BiblDB_webdriver_flag_set)
    __swig_setmethods__["wos_sid"] = _bibldbc.BiblDB_wos_sid_set
    __swig_getmethods__["wos_sid"] = _bibldbc.BiblDB_wos_sid_get
    if _newclass:
        wos_sid = _swig_property(_bibldbc.BiblDB_wos_sid_get, _bibldbc.BiblDB_wos_sid_set)
    __swig_setmethods__["wos_start_url"] = _bibldbc.BiblDB_wos_start_url_set
    __swig_getmethods__["wos_start_url"] = _bibldbc.BiblDB_wos_start_url_get
    if _newclass:
        wos_start_url = _swig_property(_bibldbc.BiblDB_wos_start_url_get, _bibldbc.BiblDB_wos_start_url_set)
    __swig_setmethods__["wos_cgi"] = _bibldbc.BiblDB_wos_cgi_set
    __swig_getmethods__["wos_cgi"] = _bibldbc.BiblDB_wos_cgi_get
    if _newclass:
        wos_cgi = _swig_property(_bibldbc.BiblDB_wos_cgi_get, _bibldbc.BiblDB_wos_cgi_set)
    __swig_setmethods__["wos_cgi_2"] = _bibldbc.BiblDB_wos_cgi_2_set
    __swig_getmethods__["wos_cgi_2"] = _bibldbc.BiblDB_wos_cgi_2_get
    if _newclass:
        wos_cgi_2 = _swig_property(_bibldbc.BiblDB_wos_cgi_2_get, _bibldbc.BiblDB_wos_cgi_2_set)
    __swig_setmethods__["wos_main_url"] = _bibldbc.BiblDB_wos_main_url_set
    __swig_getmethods__["wos_main_url"] = _bibldbc.BiblDB_wos_main_url_get
    if _newclass:
        wos_main_url = _swig_property(_bibldbc.BiblDB_wos_main_url_get, _bibldbc.BiblDB_wos_main_url_set)
    __swig_setmethods__["acro_read_str"] = _bibldbc.BiblDB_acro_read_str_set
    __swig_getmethods__["acro_read_str"] = _bibldbc.BiblDB_acro_read_str_get
    if _newclass:
        acro_read_str = _swig_property(_bibldbc.BiblDB_acro_read_str_get, _bibldbc.BiblDB_acro_read_str_set)
    __swig_setmethods__["db_mysql"] = _bibldbc.BiblDB_db_mysql_set
    __swig_getmethods__["db_mysql"] = _bibldbc.BiblDB_db_mysql_get
    if _newclass:
        db_mysql = _swig_property(_bibldbc.BiblDB_db_mysql_get, _bibldbc.BiblDB_db_mysql_set)
    __swig_setmethods__["ref_id_s"] = _bibldbc.BiblDB_ref_id_s_set
    __swig_getmethods__["ref_id_s"] = _bibldbc.BiblDB_ref_id_s_get
    if _newclass:
        ref_id_s = _swig_property(_bibldbc.BiblDB_ref_id_s_get, _bibldbc.BiblDB_ref_id_s_set)
    __swig_setmethods__["init_flag"] = _bibldbc.BiblDB_init_flag_set
    __swig_getmethods__["init_flag"] = _bibldbc.BiblDB_init_flag_get
    if _newclass:
        init_flag = _swig_property(_bibldbc.BiblDB_init_flag_get, _bibldbc.BiblDB_init_flag_set)
    __swig_setmethods__["pwos"] = _bibldbc.BiblDB_pwos_set
    __swig_getmethods__["pwos"] = _bibldbc.BiblDB_pwos_get
    if _newclass:
        pwos = _swig_property(_bibldbc.BiblDB_pwos_get, _bibldbc.BiblDB_pwos_set)
    if _newclass:
        InitNewDB = staticmethod(_bibldbc.BiblDB_InitNewDB)
    else:
        InitNewDB = _bibldbc.BiblDB_InitNewDB
BiblDB_swigregister = _bibldbc.BiblDB_swigregister
BiblDB_swigregister(BiblDB)
GET_REF_ABSTRACT = cvar.GET_REF_ABSTRACT
GET_REF_NOTES = cvar.GET_REF_NOTES
GET_REF_KEY_WORDS = cvar.GET_REF_KEY_WORDS
GET_REF_AUTH_VEC = cvar.GET_REF_AUTH_VEC
GET_REF_FULL = cvar.GET_REF_FULL

def BiblDB_RunPythonScriptInString(script_string: 'std::string') -> "int":
    return _bibldbc.BiblDB_RunPythonScriptInString(script_string)
BiblDB_RunPythonScriptInString = _bibldbc.BiblDB_RunPythonScriptInString

def BiblDB_InitNewDB() -> "BiblDB *":
    return _bibldbc.BiblDB_InitNewDB()
BiblDB_InitNewDB = _bibldbc.BiblDB_InitNewDB


def StartBiblDBApp() -> "void":
    return _bibldbc.StartBiblDBApp()
StartBiblDBApp = _bibldbc.StartBiblDBApp
# This file is compatible with both classic and new-style classes.


